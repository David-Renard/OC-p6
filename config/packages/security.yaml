security:
    # option to tell "invalid email" to user
    hide_user_not_found: false

    # set up the role hierarchy, here, this means : if you have ROLE_COMMERCIAL you automatically also have ROLE_MARKET
#    role_hierarchy:
#        ROLE_COMMERCIAL: ['ROLE_MARKET']
#        ROLE_ADMIN: ['ROLE_ALLOWED_TO_SWITCH','ROLE_MARKET']

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: homepage
            access_token:
                token_handler: App\Security\AccessTokenHandler

            # enable the switch_user authenticator : allow a user to walk over the app like another user
#            switch_user: true
#            login_throttling: true

# ------------- début - partie décommentée dans ma version précédente
#            entry_point: form_login
#            form_login:
#                login_path: app_login
#                check_path: app_login
#                enable_csrf: true
# ------------- fin - partie décommentée dans ma version précédente
#                username_parameter: email
#                password_parameter: password

            # ------------- début - partie décommentée dans ma version précédente
#            remember_me:
#                secret: '%kernel.secret%'
#                lifetime: 604800
#                path: /
#                always_remember_me: true
            # ------------- fin - partie décommentée dans ma version précédente

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin/login, roles: PUBLIC_ACCESS }
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
